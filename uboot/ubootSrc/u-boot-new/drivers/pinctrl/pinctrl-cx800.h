#ifndef __PINCTRL_CLOUDER_H__
#define __PINCTRL_CLOUDER_H__

#include <linux/pinctrl/pinctrl.h>

/*
 * hardware register defination
 */
enum clouder_pmx_reg_offset {
	CLOUDER_IOMUX_0 = 0x200,
	CLOUDER_IOMUX_1 = 0x204,
	CLOUDER_IOMUX_2 = 0x208,
	CLOUDER_IOMUX_3 = 0x20c,
	CLOUDER_IOMUX_4 = 0x210,
	CLOUDER_IOMUX_5 = 0x214,
	CLOUDER_IOMUX_6 = 0x218,
	CLOUDER_IOMUX_7 = 0x21c,
	CLOUDER_IOMUX_8 = 0x220,
};

/**
 * clouder_pmx_registers - the array of registers read/written for each pinmux
 * shunt setting
 */
const u32 clouder_pmx_registers[] = {
	CLOUDER_IOMUX_0,
	CLOUDER_IOMUX_1,
	CLOUDER_IOMUX_2,
	CLOUDER_IOMUX_3,
	CLOUDER_IOMUX_4,
	CLOUDER_IOMUX_5,
	CLOUDER_IOMUX_6,
	CLOUDER_IOMUX_7,
	CLOUDER_IOMUX_8,
};

typedef struct {
	char *name;
	u32 reg;
	u32 offset;
} iomux_info_t;

/* convinent macro to construct iomux_info. */
#define IO_INFO(a, b, c) {.name = a, .reg = b, .offset = c}

static iomux_info_t iomux_lookup_table[] = {
	IO_INFO("GPIO0_A0",	CLOUDER_IOMUX_0, 0),
	IO_INFO("GPIO0_A1",	CLOUDER_IOMUX_0, 2),
	IO_INFO("GPIO0_A2",	CLOUDER_IOMUX_0, 4),
	IO_INFO("GPIO0_A3",	CLOUDER_IOMUX_0, 6),
	IO_INFO("GPIO0_A4",	CLOUDER_IOMUX_0, 8),
	IO_INFO("GPIO0_A5",	CLOUDER_IOMUX_0, 10),
	IO_INFO("GPIO0_A6",	CLOUDER_IOMUX_0, 12),
	IO_INFO("GPIO0_A7",	CLOUDER_IOMUX_0, 14),
	IO_INFO("UART0_RX",	CLOUDER_IOMUX_0, 16),
	IO_INFO("UART0_TX",	CLOUDER_IOMUX_0, 18),
	IO_INFO("GPIO3_A2",	CLOUDER_IOMUX_0, 20),
	IO_INFO("GPIO3_A3",	CLOUDER_IOMUX_0, 22),
	IO_INFO("UART1_RX",	CLOUDER_IOMUX_0, 24),
	IO_INFO("UART1_TX",	CLOUDER_IOMUX_0, 26),
	IO_INFO("I2C1_SCL",	CLOUDER_IOMUX_0, 28),
	IO_INFO("I2C1_SDA",	CLOUDER_IOMUX_0, 30),

	IO_INFO("UART1_CTS",	CLOUDER_IOMUX_1, 0),
	IO_INFO("UART1_RTS",	CLOUDER_IOMUX_1, 2),
	IO_INFO("UART2_RX",	CLOUDER_IOMUX_1, 4),
	IO_INFO("UART2_TX",	CLOUDER_IOMUX_1, 6),
	IO_INFO("UART2_CTS",	CLOUDER_IOMUX_1, 8),
	IO_INFO("UART2_RTS",	CLOUDER_IOMUX_1, 10),
	IO_INFO("PWM0",		CLOUDER_IOMUX_1, 12),
	IO_INFO("PWM1",		CLOUDER_IOMUX_1, 14),
	IO_INFO("SSI0_CLK",	CLOUDER_IOMUX_1, 16),
	IO_INFO("SSI0_DOUT",	CLOUDER_IOMUX_1, 18),
	IO_INFO("SSI0_DIN",	CLOUDER_IOMUX_1, 20),
	IO_INFO("SSI0_CS0",	CLOUDER_IOMUX_1, 22),
	IO_INFO("NAND_DATA0",	CLOUDER_IOMUX_1, 24),
	IO_INFO("NAND_DATA1",	CLOUDER_IOMUX_1, 26),
	IO_INFO("NAND_DATA2",	CLOUDER_IOMUX_1, 28),
	IO_INFO("NAND_DATA3",	CLOUDER_IOMUX_1, 30),

	IO_INFO("NAND_DATA4",	CLOUDER_IOMUX_2, 0),
	IO_INFO("NAND_DATA5",	CLOUDER_IOMUX_2, 2),
	IO_INFO("NAND_DATA6",	CLOUDER_IOMUX_2, 4),
	IO_INFO("NAND_DATA7",	CLOUDER_IOMUX_2, 6),
	IO_INFO("NAND_CS0_N",	CLOUDER_IOMUX_2, 8),
	IO_INFO("NAND_CS1_N",	CLOUDER_IOMUX_2, 10),
	IO_INFO("NAND_RB_N",	CLOUDER_IOMUX_2, 12),
	IO_INFO("NAND_CLE",	CLOUDER_IOMUX_2, 14),
	IO_INFO("NAND_ALE",	CLOUDER_IOMUX_2, 16),
	IO_INFO("NAND_WE_N",	CLOUDER_IOMUX_2, 18),
	IO_INFO("NAND_RE_N",	CLOUDER_IOMUX_2, 20),
	IO_INFO("NAND_WP_N",	CLOUDER_IOMUX_2, 22),
	IO_INFO("BOOT_SEL0",	CLOUDER_IOMUX_2, 24),
	IO_INFO("BOOT_SEL1",	CLOUDER_IOMUX_2, 26),
	IO_INFO("BOOT_SEL2",	CLOUDER_IOMUX_2, 28),
	IO_INFO("GPIO1_A4",	CLOUDER_IOMUX_2, 30),

	IO_INFO("GPIO1_A5",	CLOUDER_IOMUX_3, 0),
	IO_INFO("GPIO1_A6",	CLOUDER_IOMUX_3, 2),
	IO_INFO("GPIO6_A3",	CLOUDER_IOMUX_3, 4),
	IO_INFO("GPIO6_A5",	CLOUDER_IOMUX_3, 6),
	IO_INFO("GPIO1_A7",	CLOUDER_IOMUX_3, 8),
	//IO_INFO("NAND_DATA14",	CLOUDER_IOMUX_3, 10),
	//IO_INFO("NAND_DATA15",	CLOUDER_IOMUX_3, 12),
	IO_INFO("MMC0_CLK0",	CLOUDER_IOMUX_3, 14),
	IO_INFO("MMC0_CMD0",	CLOUDER_IOMUX_3, 16),
	IO_INFO("MMC0_D00",	CLOUDER_IOMUX_3, 18),
	IO_INFO("MMC0_D01",	CLOUDER_IOMUX_3, 20),
	IO_INFO("MMC0_D02",	CLOUDER_IOMUX_3, 22),
	IO_INFO("MMC0_D03",	CLOUDER_IOMUX_3, 24),
	IO_INFO("GPIO7_A4",	CLOUDER_IOMUX_3, 26),
	IO_INFO("GPIO7_A5",	CLOUDER_IOMUX_3, 28),
	IO_INFO("I2C4_SCL",	CLOUDER_IOMUX_3, 30),

	IO_INFO("I2C4_SDA",	CLOUDER_IOMUX_4, 0),
	IO_INFO("I2C0_SCL",	CLOUDER_IOMUX_4, 2),
	IO_INFO("I2C0_SDA",	CLOUDER_IOMUX_4, 4),
	IO_INFO("LCD_R0",	CLOUDER_IOMUX_4, 6),
	IO_INFO("LCD_R1",	CLOUDER_IOMUX_4, 8),
	IO_INFO("LCD_R2",	CLOUDER_IOMUX_4, 10),
	IO_INFO("LCD_R3",	CLOUDER_IOMUX_4, 12),
	IO_INFO("LCD_R4",	CLOUDER_IOMUX_4, 14),
	IO_INFO("LCD_R5",	CLOUDER_IOMUX_4, 16),
	IO_INFO("LCD_R6",	CLOUDER_IOMUX_4, 18),
	IO_INFO("LCD_R7",	CLOUDER_IOMUX_4, 20),
	IO_INFO("LCD_G0",	CLOUDER_IOMUX_4, 22),
	IO_INFO("LCD_G1",	CLOUDER_IOMUX_4, 24),
	IO_INFO("LCD_G2",	CLOUDER_IOMUX_4, 26),
	IO_INFO("LCD_G3",	CLOUDER_IOMUX_4, 28),
	IO_INFO("LCD_G4",	CLOUDER_IOMUX_4, 30),

	IO_INFO("LCD_G5",	CLOUDER_IOMUX_5, 0),
	IO_INFO("LCD_G6",	CLOUDER_IOMUX_5, 2),
	IO_INFO("LCD_G7",	CLOUDER_IOMUX_5, 4),
	IO_INFO("LCD_B0",	CLOUDER_IOMUX_5, 6),
	IO_INFO("LCD_B1",	CLOUDER_IOMUX_5, 8),
	IO_INFO("LCD_B2",	CLOUDER_IOMUX_5, 10),
	IO_INFO("LCD_B3",	CLOUDER_IOMUX_5, 12),
	IO_INFO("LCD_B4",	CLOUDER_IOMUX_5, 14),
	IO_INFO("LCD_B5",	CLOUDER_IOMUX_5, 16),
	IO_INFO("LCD_B6",	CLOUDER_IOMUX_5, 18),
	IO_INFO("LCD_B7",	CLOUDER_IOMUX_5, 20),
	IO_INFO("LCD_PCLK",	CLOUDER_IOMUX_5, 22),
	IO_INFO("LCD_DE",	CLOUDER_IOMUX_5, 24),
	IO_INFO("LCD_HSYN",	CLOUDER_IOMUX_5, 26),
	IO_INFO("LCD_VSYN",	CLOUDER_IOMUX_5, 28),
	IO_INFO("UART3_RX",	CLOUDER_IOMUX_5, 30),
                     
	IO_INFO("UART3_TX",	CLOUDER_IOMUX_6, 0),
	IO_INFO("GPIO11_A6",	CLOUDER_IOMUX_6, 2),
	IO_INFO("GPIO11_A7",	CLOUDER_IOMUX_6, 4),
	IO_INFO("I2C3_SCL",	CLOUDER_IOMUX_6, 6),
	IO_INFO("I2C3_SDA",	CLOUDER_IOMUX_6, 8),
	IO_INFO("I2S0_CLK",	CLOUDER_IOMUX_6, 10),
	IO_INFO("AUDIO0_MCLK",	CLOUDER_IOMUX_6, 12),
	IO_INFO("I2S0_WS",	CLOUDER_IOMUX_6, 14),
	IO_INFO("I2S0_DI",	CLOUDER_IOMUX_6, 16),
	IO_INFO("I2S0_DO",	CLOUDER_IOMUX_6, 18),
	IO_INFO("MMC1_CLK",	CLOUDER_IOMUX_6, 20),
	IO_INFO("MMC1_CMD",	CLOUDER_IOMUX_6, 22),
	IO_INFO("MMC1_D0",	CLOUDER_IOMUX_6, 24),
	IO_INFO("MMC1_D1",	CLOUDER_IOMUX_6, 26),
	IO_INFO("MMC1_D2",	CLOUDER_IOMUX_6, 28),
	IO_INFO("MMC1_D3",	CLOUDER_IOMUX_6, 30),
	
	IO_INFO("CSI_HSYNC",	CLOUDER_IOMUX_7, 0), 
	IO_INFO("CSI_VSYNC",	CLOUDER_IOMUX_7, 2), 
	IO_INFO("CSI_PCLK",	CLOUDER_IOMUX_7, 4), 
	IO_INFO("CSI_MCLK",	CLOUDER_IOMUX_7, 6), 
	IO_INFO("CSI_D0",	CLOUDER_IOMUX_7, 8), 
	IO_INFO("CSI_D1",	CLOUDER_IOMUX_7, 10),
	IO_INFO("CSI_D2",	CLOUDER_IOMUX_7, 12),
	IO_INFO("CSI_D3",	CLOUDER_IOMUX_7, 14),
	IO_INFO("CSI_D4",	CLOUDER_IOMUX_7, 16),
	IO_INFO("CSI_D5",	CLOUDER_IOMUX_7, 18),
	IO_INFO("CSI_D6",	CLOUDER_IOMUX_7, 20),
	IO_INFO("CSI_D7",	CLOUDER_IOMUX_7, 22),
	IO_INFO("GPIO15_A0",	CLOUDER_IOMUX_7, 24),
	IO_INFO("GPIO15_A1",	CLOUDER_IOMUX_7, 26),
	IO_INFO("GPIO15_A2",	CLOUDER_IOMUX_7, 28),
	IO_INFO("GPIO15_A3",	CLOUDER_IOMUX_7, 30),

	IO_INFO("GPIO15_A4",	CLOUDER_IOMUX_8, 0),
	IO_INFO("GPIO15_A5",	CLOUDER_IOMUX_8, 2),
	IO_INFO("GPIO15_A6",	CLOUDER_IOMUX_8, 4),
	IO_INFO("GPIO15_A7",	CLOUDER_IOMUX_8, 6),

	{NULL, -1, -1}
};

static const struct pinctrl_pin_desc clouder_pads[] = {
	/* Pads along the top edge of the chip */
	PINCTRL_PIN(0,   "CLK_32K_IN"), 
	PINCTRL_PIN(1,   "CLK_32K_OUT"),
	PINCTRL_PIN(2,   "POR_N"),
	PINCTRL_PIN(3,   "WARMRST_N"),
	PINCTRL_PIN(4,   "RTC_INT"),
	PINCTRL_PIN(5,   "RTCRST_N"),
	PINCTRL_PIN(6,   "PWKEY_N"),
	PINCTRL_PIN(7,   "RTC_CLKOUT"),
	PINCTRL_PIN(8,   "TEST_MODE0"),
	PINCTRL_PIN(9,   "TEST_MODE1"),
	PINCTRL_PIN(10,  "TEST_MODE2"),
	PINCTRL_PIN(11,  "GPIO0_A0"),
	PINCTRL_PIN(12,  "GPIO0_A1"),
	PINCTRL_PIN(13,  "GPIO0_A2"),
	PINCTRL_PIN(14,  "GPIO0_A3"),
	PINCTRL_PIN(15,  "GPIO0_A4"),
	PINCTRL_PIN(16,  "GPIO0_A5"),
	PINCTRL_PIN(17,  "GPIO0_A6"),
	PINCTRL_PIN(18,  "GPIO0_A7"),
	PINCTRL_PIN(19,  "JTAG_TCK"),
	PINCTRL_PIN(20,  "JTAG_TRSTN"),
	PINCTRL_PIN(21,  "JTAG_TMS"),
	PINCTRL_PIN(22,  "JTAG_TDI"),
	PINCTRL_PIN(23,  "JTAG_TDO"),
	PINCTRL_PIN(24,  "JTAG_INT"),
	PINCTRL_PIN(25,  "JTAG_RSTN"),
	PINCTRL_PIN(26,  "UART0_RX"),
	PINCTRL_PIN(27,  "UART0_TX"),
	PINCTRL_PIN(28,  "GPIO3_A2"),
	PINCTRL_PIN(29,  "GPIO3_A3"),
	PINCTRL_PIN(30,  "UART1_RX"),
	PINCTRL_PIN(31,  "UART1_TX"),
	PINCTRL_PIN(32,  "I2C1_SCL"),
	PINCTRL_PIN(33,  "I2C1_SDA"),
	PINCTRL_PIN(34,  "UART1_CTS"),
	PINCTRL_PIN(35,  "UART1_RTS"),
	PINCTRL_PIN(36,  "UART2_RX"),
	PINCTRL_PIN(37,  "UART2_TX"),
	PINCTRL_PIN(38,  "UART2_CTS"),
	PINCTRL_PIN(39,  "UART2_RTS"),
	PINCTRL_PIN(40,  "PWM0"),
	PINCTRL_PIN(41,  "PWM1"),
	PINCTRL_PIN(42,  "SSI0_CLK"),
	PINCTRL_PIN(43,  "SSI0_DOUT"),
	PINCTRL_PIN(44,  "SSI0_DIN"),
	PINCTRL_PIN(45,  "SSI0_CS0"),
	PINCTRL_PIN(46,  "XTAL_IN"),
	PINCTRL_PIN(47,  "XTAL_OUT"),
	PINCTRL_PIN(48,  "NAND_DATA0"),
	PINCTRL_PIN(49,  "NAND_DATA1"),
	PINCTRL_PIN(50,  "NAND_DATA2"),
	PINCTRL_PIN(51,  "NAND_DATA3"),
	PINCTRL_PIN(52,  "NAND_DATA4"),
	PINCTRL_PIN(53,  "NAND_DATA5"),
	PINCTRL_PIN(54,  "NAND_DATA6"),
	PINCTRL_PIN(55,  "NAND_DATA7"),
	PINCTRL_PIN(56,  "NAND_CS0_N"),
	PINCTRL_PIN(57,  "NAND_CS1_N"),
	PINCTRL_PIN(58,  "NAND_RB_N"),
	PINCTRL_PIN(59,  "NAND_CLE"),
	PINCTRL_PIN(60,  "NAND_ALE"),
	PINCTRL_PIN(61,  "NAND_WE_N"),
	PINCTRL_PIN(62,  "NAND_RE_N"),
	PINCTRL_PIN(63,  "NAND_WP_N"),
	PINCTRL_PIN(64,  "BOOT_SEL0"),
	PINCTRL_PIN(65,  "BOOT_SEL1"),
	PINCTRL_PIN(66,  "BOOT_SEL2"),
	PINCTRL_PIN(67,  "GPIO1_A4"),
	PINCTRL_PIN(68,  "GPIO1_A5"),
	PINCTRL_PIN(69,  "GPIO1_A6"),
	PINCTRL_PIN(70,  "GPIO6_A3"),
	PINCTRL_PIN(71,  "GPIO6_A5"),
	PINCTRL_PIN(72,  "GPIO1_A7"),
	PINCTRL_PIN(73,  "MMC0_CLK0"),
	PINCTRL_PIN(74,  "MMC0_CMD0"),
	PINCTRL_PIN(75,  "MMC0_D00"),
	PINCTRL_PIN(76,  "MMC0_D01"),
	PINCTRL_PIN(77,  "MMC0_D02"),
	PINCTRL_PIN(78,  "MMC0_D03"),
	PINCTRL_PIN(79,  "GPIO7_A4"),
	PINCTRL_PIN(80,  "GPIO7_A5"),
	PINCTRL_PIN(81,  "I2C4_SCL"),
	PINCTRL_PIN(82,  "I2C4_SDA"),
	PINCTRL_PIN(83,  "I2C0_SCL"),
	PINCTRL_PIN(84,  "I2C0_SDA"),
	PINCTRL_PIN(85,  "LCD_R0"),
	PINCTRL_PIN(86,  "LCD_R1"),
	PINCTRL_PIN(87,  "LCD_R2"),
	PINCTRL_PIN(88,  "LCD_R3"),
	PINCTRL_PIN(89,  "LCD_R4"),
	PINCTRL_PIN(90,  "LCD_R5"),
	PINCTRL_PIN(91,  "LCD_R6"),
	PINCTRL_PIN(92,  "LCD_R7"),
	PINCTRL_PIN(93,  "LCD_G0"),
	PINCTRL_PIN(94,  "LCD_G1"),
	PINCTRL_PIN(95,  "LCD_G2"),
	PINCTRL_PIN(96,  "LCD_G3"),
	PINCTRL_PIN(97,  "LCD_G4"),
	PINCTRL_PIN(98,  "LCD_G5"),
	PINCTRL_PIN(99,  "LCD_G6"),
	PINCTRL_PIN(100, "LCD_G7"),
	PINCTRL_PIN(101, "LCD_B0"),
	PINCTRL_PIN(102, "LCD_B1"),
	PINCTRL_PIN(103, "LCD_B2"),
	PINCTRL_PIN(104, "LCD_B3"),
	PINCTRL_PIN(105, "LCD_B4"),
	PINCTRL_PIN(106, "LCD_B5"),
	PINCTRL_PIN(107, "LCD_B6"),
	PINCTRL_PIN(108, "LCD_B7"),
	PINCTRL_PIN(109, "LCD_PCLK"),
	PINCTRL_PIN(110, "LCD_DE"),
	PINCTRL_PIN(111, "LCD_HSYN"),
	PINCTRL_PIN(112, "LCD_VSYN"),
	PINCTRL_PIN(113, "UART3_RX"),
	PINCTRL_PIN(114, "UART3_TX"),
	PINCTRL_PIN(115, "GPIO11_A6"),
	PINCTRL_PIN(116, "GPIO11_A7"),
	PINCTRL_PIN(117, "I2C3_SCL"),
	PINCTRL_PIN(118, "I2C3_SDA"),
	PINCTRL_PIN(119, "I2S0_CLK"),
	PINCTRL_PIN(120, "AUDIO0_MCLK"),
	PINCTRL_PIN(121, "I2S0_WS"),
	PINCTRL_PIN(122, "I2S0_DI"),
	PINCTRL_PIN(123, "I2S0_DO"),
	PINCTRL_PIN(124, "MMC1_CLK"),
	PINCTRL_PIN(125, "MMC1_CMD"),
	PINCTRL_PIN(126, "MMC1_D0"),
	PINCTRL_PIN(127, "MMC1_D1"),
	PINCTRL_PIN(128, "MMC1_D2"),
	PINCTRL_PIN(129, "MMC1_D3"),
	PINCTRL_PIN(130, "CSI_HSYNC"),
	PINCTRL_PIN(131, "CSI_VSYNC"),
	PINCTRL_PIN(132, "CSI_PCLK"),
	PINCTRL_PIN(133, "CSI_MCLK"),
	PINCTRL_PIN(134, "CSI_D0"),
	PINCTRL_PIN(135, "CSI_D1"),
	PINCTRL_PIN(136, "CSI_D2"),
	PINCTRL_PIN(137, "CSI_D3"),
	PINCTRL_PIN(138, "CSI_D4"),
	PINCTRL_PIN(139, "CSI_D5"),
	PINCTRL_PIN(140, "CSI_D6"),
	PINCTRL_PIN(141, "CSI_D7"),
	PINCTRL_PIN(142, "GPIO15_A0"),
	PINCTRL_PIN(143, "GPIO15_A1"),
	PINCTRL_PIN(144, "GPIO15_A2"),
	PINCTRL_PIN(145, "GPIO15_A3"),
	PINCTRL_PIN(146, "GPIO15_A4"),
	PINCTRL_PIN(147, "GPIO15_A5"),
	PINCTRL_PIN(148, "GPIO15_A6"),
	PINCTRL_PIN(149, "GPIO15_A7"),
	PINCTRL_PIN(150, "DDR_DQ0"),
	PINCTRL_PIN(151, "DDR_DQ1"),
	PINCTRL_PIN(152, "DDR_DQ2"),
	PINCTRL_PIN(153, "DDR_DQ3"),
	PINCTRL_PIN(154, "DDR_DQ4"),
	PINCTRL_PIN(155, "DDR_DQ5"),
	PINCTRL_PIN(156, "DDR_DQ6"),
	PINCTRL_PIN(157, "DDR_DQ7"),
	PINCTRL_PIN(158, "DDR_DQ8"),
	PINCTRL_PIN(159, "DDR_DQ9"),
	PINCTRL_PIN(160, "DDR_DQ10"),
	PINCTRL_PIN(161, "DDR_DQ11"),
	PINCTRL_PIN(162, "DDR_DQ12"),
	PINCTRL_PIN(163, "DDR_DQ13"),
	PINCTRL_PIN(164, "DDR_DQ14"),
	PINCTRL_PIN(165, "DDR_DQ15"),
	PINCTRL_PIN(166, "DDR_DQ16"),
	PINCTRL_PIN(167, "DDR_DQ17"),
	PINCTRL_PIN(168, "DDR_DQ18"),
	PINCTRL_PIN(169, "DDR_DQ19"),
	PINCTRL_PIN(170, "DDR_DQ20"),
	PINCTRL_PIN(171, "DDR_DQ21"),
	PINCTRL_PIN(172, "DDR_DQ22"),
	PINCTRL_PIN(173, "DDR_DQ23"),
	PINCTRL_PIN(174, "DDR_DQ24"),
	PINCTRL_PIN(175, "DDR_DQ25"),
	PINCTRL_PIN(176, "DDR_DQ26"),
	PINCTRL_PIN(177, "DDR_DQ27"),
	PINCTRL_PIN(178, "DDR_DQ28"),
	PINCTRL_PIN(179, "DDR_DQ29"),
	PINCTRL_PIN(180, "DDR_DQ30"),
	PINCTRL_PIN(181, "DDR_DQ31"),
	PINCTRL_PIN(182, "DDR_DQS0"),
	PINCTRL_PIN(183, "DDR_DQS1"),
	PINCTRL_PIN(184, "DDR_DQS2"),
	PINCTRL_PIN(185, "DDR_DQS3"),
	PINCTRL_PIN(186, "DDR_DQS_N0"),
	PINCTRL_PIN(187, "DDR_DQS_N1"),
	PINCTRL_PIN(188, "DDR_DQS_N2"),
	PINCTRL_PIN(189, "DDR_DQS_N3"),
	PINCTRL_PIN(190, "DDR_DM0"),
	PINCTRL_PIN(191, "DDR_DM1"),
	PINCTRL_PIN(192, "DDR_DM2"),
	PINCTRL_PIN(193, "DDR_DM3"),
	PINCTRL_PIN(194, "DDR_BA0"),
	PINCTRL_PIN(195, "DDR_BA1"),
	PINCTRL_PIN(196, "DDR_BA2"),
	PINCTRL_PIN(197, "DDR_ADDR0"),
	PINCTRL_PIN(198, "DDR_ADDR1"),
	PINCTRL_PIN(199, "DDR_ADDR2"),
	PINCTRL_PIN(200, "DDR_ADDR3"),
	PINCTRL_PIN(201, "DDR_ADDR4"),
	PINCTRL_PIN(202, "DDR_ADDR5"),
	PINCTRL_PIN(203, "DDR_ADDR6"),
	PINCTRL_PIN(204, "DDR_ADDR7"),
	PINCTRL_PIN(205, "DDR_ADDR8"),
	PINCTRL_PIN(206, "DDR_ADDR9"),
	PINCTRL_PIN(207, "DDR_ADDR10"),
	PINCTRL_PIN(208, "DDR_ADDR11"),
	PINCTRL_PIN(209, "DDR_ADDR12"),
	PINCTRL_PIN(210, "DDR_ADDR13"),
	PINCTRL_PIN(211, "DDR_ADDR14"),
	PINCTRL_PIN(212, "DDR_ADDR15"),
	PINCTRL_PIN(213, "DDR_ODT0"),
	PINCTRL_PIN(214, "DDR_ODT1"),
	PINCTRL_PIN(215, "DDR_RAS_N"),
	PINCTRL_PIN(216, "DDR_CAS_N"),
	PINCTRL_PIN(217, "DDR_WE_N"),
	PINCTRL_PIN(218, "DDR_RST_N"),
	PINCTRL_PIN(219, "DDR_CK0"),
	PINCTRL_PIN(220, "DDR_CK0_N"),
	PINCTRL_PIN(221, "DDR_CKE"),
	PINCTRL_PIN(222, "DDR_CS0_N"),
	PINCTRL_PIN(223, "DDR_CS1_N"),
	PINCTRL_PIN(224, "DDR_ZQ0"),
	PINCTRL_PIN(225, "DDR_ZQ1"),
	PINCTRL_PIN(226, "DDR_VREF0"),
	PINCTRL_PIN(227, "DDR_VREF1"),
	PINCTRL_PIN(228, "USB_DM0"),
	PINCTRL_PIN(229, "USB_DP0"),
	PINCTRL_PIN(230, "USB_DVDD"),
	PINCTRL_PIN(231, "USB_ID0"),
	PINCTRL_PIN(232, "USB_TXRTUNE"),
	PINCTRL_PIN(233, "USB_VBUS0"),
	PINCTRL_PIN(234, "USB_VDD25"),
	PINCTRL_PIN(235, "USB_VDD330"),
	PINCTRL_PIN(236, "USB_VSSA"),
	PINCTRL_PIN(237, "USB_VSSAB1"),
	PINCTRL_PIN(238, "USB_VSSAB2"),
	PINCTRL_PIN(239, "USB_XI"),
	PINCTRL_PIN(240, "USB_XO"),
	PINCTRL_PIN(241, "ADC_CH0"),
	PINCTRL_PIN(242, "ADC_CH1"),
	PINCTRL_PIN(243, "ADC_CH2"),
	PINCTRL_PIN(244, "ADC_CH3"),
	PINCTRL_PIN(245, "ADC_CH4"),
	PINCTRL_PIN(246, "ADC_CH5"),
	PINCTRL_PIN(247, "ADC_CH6"),
	PINCTRL_PIN(248, "ADC_VREF"),
	PINCTRL_PIN(249, "ADC_VDDA"),
	PINCTRL_PIN(250, "ADC_VSSA"),
	PINCTRL_PIN(251, "AUADC_AINR"),
	PINCTRL_PIN(252, "AUADC_AINL"),
	PINCTRL_PIN(253, "AUADC_AVDD33"),
	PINCTRL_PIN(254, "AUADC_VSS"),
	PINCTRL_PIN(255, "AUADC_VREF_AD"),
	PINCTRL_PIN(256, "AUDAC_AOUTL"),
	PINCTRL_PIN(257, "AUDAC_AOUTR"),
	PINCTRL_PIN(258, "AUDAC_AVDD33"),
	PINCTRL_PIN(259, "AUDAC_VSS"),
	PINCTRL_PIN(260, "AUDAC_VREF_AD")              
};

#define CLOUDER_NUM_PADS ARRAY_SIZE(clouder_pads)

/* current we have four choice */
enum CLOUDER_IOMUX_FUNC {
	IOMUX_FUNC0,
	IOMUX_FUNC1,
	IOMUX_FUNC2,
	IOMUX_FUNC3,
	IOMUX_FUNC_INVALD
};

/*
 * pin maping && function-pin mappings.
 */
static const unsigned uart0_pins[] = { 26,27,28,29 };
static const enum CLOUDER_IOMUX_FUNC uart0_func[] = {
	IOMUX_FUNC0, IOMUX_FUNC0, IOMUX_FUNC0, IOMUX_FUNC0 };

static const unsigned uart1_pins[] = { 30,31,34,35 };
static const enum CLOUDER_IOMUX_FUNC uart1_func[] = {
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC2, IOMUX_FUNC2 };

static const unsigned uart2_pins[] = { 36,37,38,39 };
static const enum CLOUDER_IOMUX_FUNC uart2_func[] = {
	IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1 };

static const unsigned uart3_pins[] = { 113,114,115,116 };
static const enum CLOUDER_IOMUX_FUNC uart3_func[] = {
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3 };

static const unsigned uart4_pins[] = { 71, 72, 67, 68 };
static const enum CLOUDER_IOMUX_FUNC uart4_func[] = {
	IOMUX_FUNC2, IOMUX_FUNC2, IOMUX_FUNC3, IOMUX_FUNC3 };

static const unsigned i2c0_pins[] = { 83,84 };
static const enum CLOUDER_IOMUX_FUNC i2c0_func[] = {
	IOMUX_FUNC1, IOMUX_FUNC1 };

static const unsigned i2c1_pins[] = { 32,33 };
static const enum CLOUDER_IOMUX_FUNC i2c1_func[] = {
	IOMUX_FUNC3, IOMUX_FUNC3 };

static const unsigned i2c2_pins[] = { 142,143 };      
static const enum CLOUDER_IOMUX_FUNC i2c2_func[] = {
        IOMUX_FUNC3, IOMUX_FUNC3 
};

static const unsigned i2c3_pins[] = { 117,118 };      
static const enum CLOUDER_IOMUX_FUNC i2c3_func[] = {
        IOMUX_FUNC3, IOMUX_FUNC3 
};

static const unsigned i2c4_pins[] = { 81,82 };      
static const enum CLOUDER_IOMUX_FUNC i2c4_func[] = {
        IOMUX_FUNC1, IOMUX_FUNC1 
};

static const unsigned i2s0_pins[] = { 119,120,121,122,123 };
static const enum CLOUDER_IOMUX_FUNC i2s0_func[] = {
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3 };

static const unsigned i2s0_4ch_pins[] = {119,120,121,122,123, 55, 56, 57 };
static const enum CLOUDER_IOMUX_FUNC i2s0_4ch_func[] = {
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3,
	IOMUX_FUNC3, IOMUX_FUNC2, IOMUX_FUNC2, IOMUX_FUNC2 };

static const unsigned lcd_pins[] = {
	85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100,
	101,102,103,104,105,106,107,108,
	109,110,111,112 };
static const enum CLOUDER_IOMUX_FUNC lcd_func[] = {
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3,
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3,
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3,
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3,
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3 };
static const unsigned i80_pins[] = {
    85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100,
	109,110,111,112 };
static const enum CLOUDER_IOMUX_FUNC i80_func[] = {
    IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1,
	IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1,
	IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1, IOMUX_FUNC1,
	IOMUX_FUNC1, IOMUX_FUNC1 };
static const unsigned pwm0_pins[] = {
    40,41 
};
static const enum CLOUDER_IOMUX_FUNC pwm0_func[] = {
    IOMUX_FUNC1, IOMUX_FUNC1 
};
static const unsigned mmc0_4b_pins[] = {
	 73,74,75,76,77,78};
static const enum CLOUDER_IOMUX_FUNC mmc0_4b_func[] = {
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3,
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3
};

static const unsigned mmc2_8b_pins[] = {
	48,49,50,51,52,53,54,55,59,60 };
static const enum CLOUDER_IOMUX_FUNC mmc2_8b_func[] = {
	IOMUX_FUNC2, IOMUX_FUNC2, IOMUX_FUNC2, IOMUX_FUNC2,
	IOMUX_FUNC2, IOMUX_FUNC2, IOMUX_FUNC2, IOMUX_FUNC2,
	IOMUX_FUNC2, IOMUX_FUNC2, IOMUX_FUNC2, IOMUX_FUNC2
};

static const unsigned mmc1_pins[] = {
	 124,125,126,127,128,129};
static const enum CLOUDER_IOMUX_FUNC mmc1_func[] = {
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3
};

static const unsigned spi0_pins[] = {
	42,43,44,45 };
static const enum CLOUDER_IOMUX_FUNC spi0_func[] = {
	IOMUX_FUNC2, IOMUX_FUNC2, IOMUX_FUNC2, IOMUX_FUNC2
};

static const unsigned csi_pins[] = {
	 130,131,132,133,134,135,136,137,138,139,140,141};
static const enum CLOUDER_IOMUX_FUNC csi_func[] = {
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3,
	IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3, IOMUX_FUNC3
};

/**
 * @dev: a pointer back to containing device
 * @virtbase: the offset to the controller in virtual memory
 */
struct clouder_pmx {
	struct pinctrl_dev *pctl;
	unsigned phybase;
	unsigned physize;
	void *virtbase;

	/* gpio maps list */
	struct list_head gmaps;
};

/**
 * struct clouder_pin_group - describes a CLOUDER pin group
 * @name: the name of this specific pin group
 * @pins: an array of discrete physical pins used in this group, taken
 *	from the driver-local pin enumeration space
 * @num_pins: the number of pins in this group array, i.e. the number of
 *	elements in .pins so we can iterate over that array
 * @func: the function configuration for this group.
 */
struct clouder_pin_group {
	const char *name;
	const unsigned int *pins;
	const unsigned num_pins;
	const enum CLOUDER_IOMUX_FUNC *func;
};

/**
 * struct clouder_pmx_func - describes CLOUDER pinmux functions
 * @name: the name of this specific function
 * @groups: corresponding pin groups
 * @onmask: bits to set to enable this when doing pin muxing
 */
struct clouder_pmx_func {
	const char *name;
	const char * const *groups;
	const unsigned num_groups;
};

struct clouder_gpio_map {
	const char *gpio_name;
	struct list_head gmap;
	const u8 pin_num;
	const enum CLOUDER_IOMUX_FUNC pimnux_func;
	const u8 gpio_num;
};

#define PINMUX_MAP(__name, __pn, __pf, __gn) { \
	.gpio_name = __name, .pin_num = __pn, \
	.pimnux_func = __pf, .gpio_num = __gn}

struct clouder_gpio_map clouder800_gpio_maps[] = {
	PINMUX_MAP("gpio0_a0", 11, IOMUX_FUNC3, 0),
	PINMUX_MAP("gpio0_a1", 12, IOMUX_FUNC3, 1),
	PINMUX_MAP("gpio0_a2", 13, IOMUX_FUNC3, 2),
	PINMUX_MAP("gpio0_a3", 14, IOMUX_FUNC3, 3),
	PINMUX_MAP("gpio0_a4", 15, IOMUX_FUNC3, 4),
	PINMUX_MAP("gpio0_a5", 16, IOMUX_FUNC3, 5),
	PINMUX_MAP("gpio0_a6", 17, IOMUX_FUNC3, 6),
	PINMUX_MAP("gpio0_a7", 18, IOMUX_FUNC3, 7),

	PINMUX_MAP("gpio1_a0", 42, IOMUX_FUNC1, 8),
	PINMUX_MAP("gpio1_a1", 43, IOMUX_FUNC1, 9),
	PINMUX_MAP("gpio1_a2", 44, IOMUX_FUNC0, 10),
	PINMUX_MAP("gpio1_a3", 45, IOMUX_FUNC1, 11),
	PINMUX_MAP("gpio1_a4", 67, IOMUX_FUNC2, 12),
	PINMUX_MAP("gpio1_a5", 68, IOMUX_FUNC2, 13),
	PINMUX_MAP("gpio1_a6", 69, IOMUX_FUNC2, 14),
	PINMUX_MAP("gpio1_a7", 72, IOMUX_FUNC3, 15),

	PINMUX_MAP("gpio2_a0", 34, IOMUX_FUNC3, 16),
	PINMUX_MAP("gpio2_a1", 35, IOMUX_FUNC3, 17),
	PINMUX_MAP("gpio2_a2", 36, IOMUX_FUNC3, 18),
	PINMUX_MAP("gpio2_a3", 37, IOMUX_FUNC3, 19),
	PINMUX_MAP("gpio2_a4", 38, IOMUX_FUNC3, 20),
	PINMUX_MAP("gpio2_a5", 39, IOMUX_FUNC3, 21),
	PINMUX_MAP("gpio2_a6", 40, IOMUX_FUNC3, 22),
	PINMUX_MAP("gpio2_a7", 41, IOMUX_FUNC3, 23),

	PINMUX_MAP("gpio3_a0", 26, IOMUX_FUNC1, 24),
	PINMUX_MAP("gpio3_a1", 27, IOMUX_FUNC1, 25),
	PINMUX_MAP("gpio3_a2", 28, IOMUX_FUNC1, 26),
	PINMUX_MAP("gpio3_a3", 29, IOMUX_FUNC1, 27),
	PINMUX_MAP("gpio3_a4", 30, IOMUX_FUNC1, 28),
	PINMUX_MAP("gpio3_a5", 31, IOMUX_FUNC1, 28),
	PINMUX_MAP("gpio3_a6", 32, IOMUX_FUNC1, 30),
	PINMUX_MAP("gpio3_a7", 22, IOMUX_FUNC1, 31),

	PINMUX_MAP("gpio4_a0", 48, IOMUX_FUNC1, 32),
	PINMUX_MAP("gpio4_a1", 49, IOMUX_FUNC1, 33),
	PINMUX_MAP("gpio4_a2", 50, IOMUX_FUNC1, 34),
	PINMUX_MAP("gpio4_a3", 51, IOMUX_FUNC1, 35),
	PINMUX_MAP("gpio4_a4", 52, IOMUX_FUNC1, 36),
	PINMUX_MAP("gpio4_a5", 53, IOMUX_FUNC1, 37),
	PINMUX_MAP("gpio4_a6", 54, IOMUX_FUNC1, 38),
	PINMUX_MAP("gpio4_a7", 55, IOMUX_FUNC1, 39),

	PINMUX_MAP("gpio5_a0", 56, IOMUX_FUNC1, 40),
	PINMUX_MAP("gpio5_a1", 57, IOMUX_FUNC1, 41),
	PINMUX_MAP("gpio5_a2", 58, IOMUX_FUNC1, 42),
	PINMUX_MAP("gpio5_a3", 59, IOMUX_FUNC1, 43),
	PINMUX_MAP("gpio5_a4", 60, IOMUX_FUNC1, 44),
	PINMUX_MAP("gpio5_a5", 61, IOMUX_FUNC1, 45),
	PINMUX_MAP("gpio5_a6", 62, IOMUX_FUNC1, 46),
	PINMUX_MAP("gpio5_a7", 63, IOMUX_FUNC1, 47),

	PINMUX_MAP("gpio6_a0", 84, IOMUX_FUNC0, 48),
	PINMUX_MAP("gpio6_a1", 73, IOMUX_FUNC0, 49),
	PINMUX_MAP("gpio6_a2", 74, IOMUX_FUNC0, 50),
	PINMUX_MAP("gpio6_a3", 70, IOMUX_FUNC2, 51),
	PINMUX_MAP("gpio6_a4", 133, IOMUX_FUNC0, 52),
	PINMUX_MAP("gpio6_a5", 71, IOMUX_FUNC3, 53),
	PINMUX_MAP("gpio6_a6", 83, IOMUX_FUNC0, 54),
//	PINMUX_MAP("gpio6_a7", 149, IOMUX_FUNC3, 55),

	PINMUX_MAP("gpio7_a0", 75, IOMUX_FUNC0, 56),
	PINMUX_MAP("gpio7_a1", 76, IOMUX_FUNC0, 57),
	PINMUX_MAP("gpio7_a2", 77, IOMUX_FUNC0, 58),
	PINMUX_MAP("gpio7_a3", 78, IOMUX_FUNC0, 59),
	PINMUX_MAP("gpio7_a4", 79, IOMUX_FUNC0, 60),
	PINMUX_MAP("gpio7_a5", 80, IOMUX_FUNC0, 61),
	PINMUX_MAP("gpio7_a6", 81, IOMUX_FUNC0, 62),
	PINMUX_MAP("gpio7_a7", 82, IOMUX_FUNC0, 63),

	PINMUX_MAP("gpio8_a0", 85, IOMUX_FUNC0, 64),
	PINMUX_MAP("gpio8_a1", 86, IOMUX_FUNC0, 65),
	PINMUX_MAP("gpio8_a2", 87, IOMUX_FUNC0, 66),
	PINMUX_MAP("gpio8_a3", 88, IOMUX_FUNC0, 67),
	PINMUX_MAP("gpio8_a4", 89, IOMUX_FUNC0, 68),
	PINMUX_MAP("gpio8_a5", 90, IOMUX_FUNC0, 69),
	PINMUX_MAP("gpio8_a6", 91, IOMUX_FUNC0, 70),
	PINMUX_MAP("gpio8_a7", 92, IOMUX_FUNC0, 71),

	PINMUX_MAP("gpio9_a0", 93, IOMUX_FUNC3, 72),
	PINMUX_MAP("gpio9_a1", 94, IOMUX_FUNC3, 73),
	PINMUX_MAP("gpio9_a2", 95, IOMUX_FUNC3, 74),
	PINMUX_MAP("gpio9_a3", 96, IOMUX_FUNC3, 75),
	PINMUX_MAP("gpio9_a4", 97, IOMUX_FUNC3, 76),
	PINMUX_MAP("gpio9_a5", 98, IOMUX_FUNC3, 77),
	PINMUX_MAP("gpio9_a6", 99, IOMUX_FUNC3, 78),
	PINMUX_MAP("gpio9_a7", 100, IOMUX_FUNC3, 79),

	PINMUX_MAP("gpio10_a0", 101, IOMUX_FUNC0, 80),
	PINMUX_MAP("gpio10_a1", 102, IOMUX_FUNC0, 81),
	PINMUX_MAP("gpio10_a2", 103, IOMUX_FUNC0, 82),
	PINMUX_MAP("gpio10_a3", 104, IOMUX_FUNC2, 83),
	PINMUX_MAP("gpio10_a4", 105, IOMUX_FUNC2, 84),
	PINMUX_MAP("gpio10_a5", 106, IOMUX_FUNC2, 85),
	PINMUX_MAP("gpio10_a6", 107, IOMUX_FUNC2, 86),
	PINMUX_MAP("gpio10_a7", 108, IOMUX_FUNC2, 87),

	PINMUX_MAP("gpio11_a0", 109, IOMUX_FUNC0, 88),
	PINMUX_MAP("gpio11_a1", 110, IOMUX_FUNC0, 89),
	PINMUX_MAP("gpio11_a2", 111, IOMUX_FUNC0, 90),
	PINMUX_MAP("gpio11_a3", 112, IOMUX_FUNC0, 91),
	PINMUX_MAP("gpio11_a4", 113, IOMUX_FUNC0, 92),
	PINMUX_MAP("gpio11_a5", 114, IOMUX_FUNC0, 93),
	PINMUX_MAP("gpio11_a6", 115, IOMUX_FUNC0, 94),
	PINMUX_MAP("gpio11_a7", 116, IOMUX_FUNC0, 95),

	PINMUX_MAP("gpio12_a0", 117, IOMUX_FUNC0, 96),
	PINMUX_MAP("gpio12_a1", 118, IOMUX_FUNC0, 97),
	PINMUX_MAP("gpio12_a2", 119, IOMUX_FUNC0, 98),
	PINMUX_MAP("gpio12_a3", 120, IOMUX_FUNC0, 99),
	PINMUX_MAP("gpio12_a4", 121, IOMUX_FUNC0, 100),
	PINMUX_MAP("gpio12_a5", 122, IOMUX_FUNC0, 101),
	PINMUX_MAP("gpio12_a6", 123, IOMUX_FUNC0, 102),
	PINMUX_MAP("gpio12_a7", 124, IOMUX_FUNC0, 103),

	PINMUX_MAP("gpio13_a0", 125, IOMUX_FUNC0, 104),
	PINMUX_MAP("gpio13_a1", 126, IOMUX_FUNC0, 105),
	PINMUX_MAP("gpio13_a2", 127, IOMUX_FUNC0, 106),
	PINMUX_MAP("gpio13_a3", 128, IOMUX_FUNC0, 107),
	PINMUX_MAP("gpio13_a4", 129, IOMUX_FUNC0, 108),
	PINMUX_MAP("gpio13_a5", 130, IOMUX_FUNC0, 109),
	PINMUX_MAP("gpio13_a6", 131, IOMUX_FUNC0, 110),
	PINMUX_MAP("gpio13_a7", 132, IOMUX_FUNC0, 111),

	PINMUX_MAP("gpio14_a0", 134, IOMUX_FUNC0, 112),
	PINMUX_MAP("gpio14_a1", 135, IOMUX_FUNC0, 113),
	PINMUX_MAP("gpio14_a2", 136, IOMUX_FUNC0, 114),
	PINMUX_MAP("gpio14_a3", 137, IOMUX_FUNC0, 115),
	PINMUX_MAP("gpio14_a4", 138, IOMUX_FUNC0, 116),
	PINMUX_MAP("gpio14_a5", 139, IOMUX_FUNC0, 117),
	PINMUX_MAP("gpio14_a6", 140, IOMUX_FUNC0, 118),
	PINMUX_MAP("gpio14_a7", 141, IOMUX_FUNC0, 119),

	PINMUX_MAP("gpio15_a0", 142, IOMUX_FUNC0, 120),
	PINMUX_MAP("gpio15_a1", 143, IOMUX_FUNC0, 121),
	PINMUX_MAP("gpio15_a2", 144, IOMUX_FUNC0, 122),
	PINMUX_MAP("gpio15_a3", 145, IOMUX_FUNC0, 123),
	PINMUX_MAP("gpio15_a4", 146, IOMUX_FUNC0, 124),
	PINMUX_MAP("gpio15_a5", 147, IOMUX_FUNC0, 125),
	PINMUX_MAP("gpio15_a6", 148, IOMUX_FUNC0, 126),
	PINMUX_MAP("gpio15_a7", 149, IOMUX_FUNC0, 127),
};

/*
 * GPIO ranges handled by the application-side COH901XXX GPIO controller
 * Very many pins can be converted into GPIO pins, but we only list those
 * that are useful in practice to cut down on tables.
 */
#define GPIO_RANGE(_gid, a, b, c) { .name = "gpio", .id = _gid, .base= a, \
	.pin_base = b, .npins = c }

static struct pinctrl_gpio_range clouder800_gpio_ranges[] = {
	GPIO_RANGE(0, 0, 11, 8), /* Group0, gpio num base 0, pin_base 11 */
	GPIO_RANGE(1, 24, 26, 8),
	GPIO_RANGE(2, 16, 34, 8),
	GPIO_RANGE(3, 8, 42, 4),
	GPIO_RANGE(4, 32, 48, 8),
	GPIO_RANGE(5, 40, 56, 8),
	GPIO_RANGE(6, 12, 67, 3),
	GPIO_RANGE(7, 51, 70, 1),
	GPIO_RANGE(8, 53, 71, 1),
	GPIO_RANGE(9, 15, 72, 1),
	GPIO_RANGE(10, 49, 73, 2),
	GPIO_RANGE(11, 56, 75, 8),
	GPIO_RANGE(12, 54, 83, 1),
	GPIO_RANGE(13, 48, 84, 1),
	GPIO_RANGE(14, 64, 85, 48),
	GPIO_RANGE(15, 52, 133, 1),
	GPIO_RANGE(16, 112, 134, 16)
};

#endif /*  __PINCTRL_CLOUDER_H__ */
